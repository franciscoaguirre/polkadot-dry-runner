var c=(()=>{for(var B=new Uint8Array(128),A=0;A<64;A++)B[A<26?A+65:A<52?A+71:A<62?A-4:A*4-205]=A;return Z=>{for(var G=Z.length,Q=new Uint8Array((G-(Z[G-1]=="=")-(Z[G-2]=="="))*3/4|0),l=0,b=0;l<G;){var E=B[Z.charCodeAt(l++)],W=B[Z.charCodeAt(l++)],V=B[Z.charCodeAt(l++)],X=B[Z.charCodeAt(l++)];Q[b++]=E<<2|W>>4,Q[b++]=W<<4|V>>2,Q[b++]=V<<6|X}return Q}})(),Y=c("");export{Y as default};
